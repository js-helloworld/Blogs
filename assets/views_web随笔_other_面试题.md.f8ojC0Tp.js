import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.CjNeJe2C.js";const p="/Blogs/assets/css.BQak_Asp.jpg",t="/Blogs/assets/image-20231119185900990.DcyfvHZy.png",e="/Blogs/assets/image-wdsp.DF6eT9Tg.png",y=JSON.parse('{"title":"面试题","description":"","frontmatter":{"title":"面试题","date":"2024-11-06T00:00:00.000Z","tags":["面试"],"categories":["面试"]},"headers":[],"relativePath":"views/web随笔/other/面试题.md","filePath":"views/web随笔/other/面试题.md"}'),h={name:"views/web随笔/other/面试题.md"};function k(d,s,r,E,o,c){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="html-css" tabindex="-1">HTML &amp;&amp; CSS <a class="header-anchor" href="#html-css" aria-label="Permalink to &quot;HTML &amp;&amp; CSS&quot;">​</a></h1><h2 id="一、html5-新特性、语义化" tabindex="-1">一、HTML5 新特性、语义化 <a class="header-anchor" href="#一、html5-新特性、语义化" aria-label="Permalink to &quot;一、HTML5 新特性、语义化&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1.概念： <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1.概念：&quot;">​</a></h3><p>HTML5的语义化指的是 <code>合理正确的使用语义化的标签来创建页面结构</code> 。【正确的标签做正确的 事】</p><h3 id="_2-语义化标签" tabindex="-1">2.语义化标签 <a class="header-anchor" href="#_2-语义化标签" aria-label="Permalink to &quot;2.语义化标签&quot;">​</a></h3><p>header nav main article section aside footer</p><h3 id="_3-语义化的优点" tabindex="-1">3.语义化的优点: <a class="header-anchor" href="#_3-语义化的优点" aria-label="Permalink to &quot;3.语义化的优点:&quot;">​</a></h3><ul><li>在 <code>没CSS样式的情况下，页面整体也会呈现很好的结构效果</code></li><li><code>代码结构清晰</code> ，易于阅读</li><li><code>利于开发和维护</code> 方便其他设备解析（如屏幕阅读器）根据语义渲染⽹⻚。</li><li><code>有利于搜索引擎优化（SEO）</code> ，搜索引擎爬⾍会根据不同的标签来赋予不同的权重</li></ul><h2 id="二、css-选择器及优先级" tabindex="-1">二、CSS 选择器及优先级 <a class="header-anchor" href="#二、css-选择器及优先级" aria-label="Permalink to &quot;二、CSS 选择器及优先级&quot;">​</a></h2><h3 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h3><p>id选择器(#myid)</p><ul><li>类选择器(.myclass)</li><li>属性选择器(a[rel=&quot;external&quot;])</li><li>伪类选择器(a:hover, li:nth-child)</li><li>标签选择器(div, h1,p)</li><li>相邻选择器（h1 + p）</li><li>⼦选择器(ul &gt; li)</li><li>后代选择器(li a)</li><li>通配符选择器(*)</li></ul><h3 id="优先级" tabindex="-1">优先级： <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级：&quot;">​</a></h3><ul><li>!important</li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器/属性选择器/伪类选择器（0010）</li><li>元素选择器/伪元素选择器（0001）</li><li>关系选择器/通配符选择器（0000） 带!important 标记的样式属性优先级最⾼； 样式表的来源相同时： !important &gt; 行内样式&gt;ID选 择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性 <img src="'+p+`" alt="css.jpg" style="zoom:60%;"></li></ul><h2 id="三、position-属性的值有哪些及其区别" tabindex="-1">三、position 属性的值有哪些及其区别 <a class="header-anchor" href="#三、position-属性的值有哪些及其区别" aria-label="Permalink to &quot;三、position 属性的值有哪些及其区别&quot;">​</a></h2><h3 id="_1-static-默认值" tabindex="-1">1. static（默认值） <a class="header-anchor" href="#_1-static-默认值" aria-label="Permalink to &quot;1. static（默认值）&quot;">​</a></h3><p>元素按照正常文档流进行排列，不受 top、bottom、left 和 right 属性的影响。</p><h3 id="_2-relative-相对定位" tabindex="-1">2. relative（相对定位） <a class="header-anchor" href="#_2-relative-相对定位" aria-label="Permalink to &quot;2. relative（相对定位）&quot;">​</a></h3><p>如果对⼀个元素进行相对定位，它将出现在它所在的位置上。然后可以通过设置垂直或⽔平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，⽆论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p><h3 id="_3-absolute-绝对定位" tabindex="-1">3. absolute（绝对定位） <a class="header-anchor" href="#_3-absolute-绝对定位" aria-label="Permalink to &quot;3. absolute（绝对定位）&quot;">​</a></h3><p>绝对定位的元素的位置相对于最近的已定位⽗元素，如果元素没有已定位的⽗元素，那么它的位置相对于。absolute定位使元素的位置与文档流⽆关，因此不占据空间。 absolute定位的元素和其他元素重叠</p><h3 id="_4-fixed-固定定位" tabindex="-1">4. fixed（固定定位） <a class="header-anchor" href="#_4-fixed-固定定位" aria-label="Permalink to &quot;4. fixed（固定定位）&quot;">​</a></h3><p>元素的位置相对于浏览器窗⼝是固定位置，即使窗⼝是滚动的它也不会移动。Fixed定位使元素的位置与文档流⽆关，因此不占据空间。 Fixed定位的元素和其他元素重叠</p><h3 id="_5-sticky-粘性定位" tabindex="-1">5. sticky（粘性定位） <a class="header-anchor" href="#_5-sticky-粘性定位" aria-label="Permalink to &quot;5. sticky（粘性定位）&quot;">​</a></h3><p>元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p><h2 id="四、box-sizing属性" tabindex="-1">四、box-sizing属性 <a class="header-anchor" href="#四、box-sizing属性" aria-label="Permalink to &quot;四、box-sizing属性&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型</span></span>
<span class="line"><span>CSS的盒子模型区别：</span></span>
<span class="line"><span>  标准盒子模型：margin、border、padding、content</span></span>
<span class="line"><span>  IE盒子模型 ：margin、content（ border +  padding  + content ）</span></span>
<span class="line"><span>通过CSS如何转换盒子模型：</span></span>
<span class="line"><span>  box-sizing: content-box;  /*标准盒子模型*/</span></span>
<span class="line"><span>  box-sizing: border-box; /*IE盒子模型*/</span></span></code></pre></div><h2 id="五、bfc-块级格式上下文" tabindex="-1">五、BFC（块级格式上下文） <a class="header-anchor" href="#五、bfc-块级格式上下文" aria-label="Permalink to &quot;五、BFC（块级格式上下文）&quot;">​</a></h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 了解BFC ： 块级格式化上下文。</span></span>
<span class="line"><span>2. BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</span></span>
<span class="line"><span>3. 如何触发BFC：</span></span>
<span class="line"><span>  - float的值非none</span></span>
<span class="line"><span>  - overflow的值非visible</span></span>
<span class="line"><span>  - display的值为：为inline-block、table-cell、table-caption...</span></span>
<span class="line"><span>  - position的值为:absoute、fixed</span></span>
<span class="line"><span>4. BFC的使用场景</span></span>
<span class="line"><span>  - 去除边距重叠现象</span></span>
<span class="line"><span>  - 清除浮动（让⽗元素的⾼度包含⼦浮动元素）</span></span>
<span class="line"><span>  - 避免某元素被浮动元素覆盖</span></span>
<span class="line"><span>  - 避免多列布局由于宽度计算四舍五⼊而⾃动换行</span></span></code></pre></div><h4 id="清除浮动有哪些方式" tabindex="-1">清除浮动有哪些方式？ <a class="header-anchor" href="#清除浮动有哪些方式" aria-label="Permalink to &quot;清除浮动有哪些方式？&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 触发BFC</span></span>
<span class="line"><span>2. 多创建一个盒子，添加样式：clear: both;</span></span>
<span class="line"><span>3. after方式</span></span>
<span class="line"><span>  ul:after{</span></span>
<span class="line"><span>    content: &#39;&#39;;</span></span>
<span class="line"><span>    display: block;</span></span>
<span class="line"><span>    clear: both;</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h2 id="六、让一个元素水平垂直居中的方式有哪些" tabindex="-1">六、让一个元素水平垂直居中的方式有哪些？ <a class="header-anchor" href="#六、让一个元素水平垂直居中的方式有哪些" aria-label="Permalink to &quot;六、让一个元素水平垂直居中的方式有哪些？&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&#39;container&#39;&gt;</span></span>
<span class="line"><span>  &lt;div class=&#39;main&#39;&gt;main&lt;/div&gt; </span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><h3 id="_1-定位-margin" tabindex="-1">1.定位+margin <a class="header-anchor" href="#_1-定位-margin" aria-label="Permalink to &quot;1.定位+margin&quot;">​</a></h3><p><code>须知元素main的宽高</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>  position: relative;</span></span>
<span class="line"><span>  width: 300px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  border:5px solid #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  position:absolute;</span></span>
<span class="line"><span>  left:50%;</span></span>
<span class="line"><span>  top:50%;</span></span>
<span class="line"><span>  width:120px;</span></span>
<span class="line"><span>  height:180px;</span></span>
<span class="line"><span>  margin-left: -60px;</span></span>
<span class="line"><span>  margin-top:-90px;</span></span>
<span class="line"><span>  background: red;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="margin-auto" tabindex="-1">margin:auto <a class="header-anchor" href="#margin-auto" aria-label="Permalink to &quot;margin:auto&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>  position: relative;</span></span>
<span class="line"><span>  width: 300px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  border:5px solid #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  position: absolute;</span></span>
<span class="line"><span>  width:120px;</span></span>
<span class="line"><span>  height:180px;</span></span>
<span class="line"><span>  left:0;</span></span>
<span class="line"><span>  top:0;</span></span>
<span class="line"><span>  right: 0;</span></span>
<span class="line"><span>  bottom: 0;</span></span>
<span class="line"><span>  margin:auto;</span></span>
<span class="line"><span>  background: red;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_2-定位-transform" tabindex="-1">2.定位+transform <a class="header-anchor" href="#_2-定位-transform" aria-label="Permalink to &quot;2.定位+transform&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>  position: relative;</span></span>
<span class="line"><span>  width: 300px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  border:5px solid #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  position: absolute;</span></span>
<span class="line"><span>  left:50%;</span></span>
<span class="line"><span>  top:50%;</span></span>
<span class="line"><span>  background: red;</span></span>
<span class="line"><span>  transform: translate(-50%,-50%);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_3-flex布局" tabindex="-1">3.flex布局 <a class="header-anchor" href="#_3-flex布局" aria-label="Permalink to &quot;3.flex布局&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  justify-content: center;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>  width: 300px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  border:5px solid #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  background: red;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-grid布局" tabindex="-1">4.grid布局 <a class="header-anchor" href="#_4-grid布局" aria-label="Permalink to &quot;4.grid布局&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container {</span></span>
<span class="line"><span>  width: 300px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  display: grid;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>  justify-items: center;</span></span>
<span class="line"><span>  border:5px solid #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  background: red;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_5-table布局" tabindex="-1">5.table布局 <a class="header-anchor" href="#_5-table布局" aria-label="Permalink to &quot;5.table布局&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container {</span></span>
<span class="line"><span>  display: table;</span></span>
<span class="line"><span>  width: 300px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  border: 1px solid #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  display: table-cell;</span></span>
<span class="line"><span>  vertical-align: middle;</span></span>
<span class="line"><span>  text-align: center;</span></span>
<span class="line"><span>  background: red;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="七、隐藏元素的方法有哪些" tabindex="-1">七、隐藏元素的方法有哪些？ <a class="header-anchor" href="#七、隐藏元素的方法有哪些" aria-label="Permalink to &quot;七、隐藏元素的方法有哪些？&quot;">​</a></h2><ul><li><code>display:none;</code> 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显 示对应的元素，在文档布局中不再分配空间（回流+重绘）</li><li><code>opacity:0;</code> 该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 ⼀些事件， 如click 事件，那么点击该区域，也能触发点击事件的</li><li><code>visibility:hidden;</code> 该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑 定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</li><li><code>position:absolute;</code></li><li><code>clip-path;</code> // 使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。可以指定一些特定形状。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>重排（回流）：布局引擎会根据所有的样式计算出盒模型在页面上的位置和大小</span></span>
<span class="line"><span>重绘：计算好盒模型的位置、大小和其他一些属性之后，浏览器就会根据每个盒模型的特性进行绘制浏览器的渲染机制</span></span>
<span class="line"><span></span></span>
<span class="line"><span>对DOM的大小、位置进行修改后，浏览器需要重新计算元素的这些几何属性，就叫重排</span></span>
<span class="line"><span>对DOM的样式进行修改，比如color和background-color，浏览器不需要重新计算几何属性的时候，直接绘制了该元素的新样式，那么这里就只触发了重绘</span></span></code></pre></div><h2 id="八、用css实现三角形" tabindex="-1">八、用CSS实现三角形 <a class="header-anchor" href="#八、用css实现三角形" aria-label="Permalink to &quot;八、用CSS实现三角形&quot;">​</a></h2><p><code>记忆⼝诀：盒⼦宽⾼均为零，三⾯边框皆透明。</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>div {</span></span>
<span class="line"><span>  width: 0;</span></span>
<span class="line"><span>  height: 0;</span></span>
<span class="line"><span>  border-top: 20px solid transparent;</span></span>
<span class="line"><span>  border-right: 20px solid transparent;</span></span>
<span class="line"><span>  border-bottom: 20px solid red;</span></span>
<span class="line"><span>  border-left: 20px solid transparent;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="九、页面布局" tabindex="-1">九、页面布局 <a class="header-anchor" href="#九、页面布局" aria-label="Permalink to &quot;九、页面布局&quot;">​</a></h2><h3 id="_1-flex-布局" tabindex="-1">1. Flex 布局 <a class="header-anchor" href="#_1-flex-布局" aria-label="Permalink to &quot;1. Flex 布局&quot;">​</a></h3><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特 殊布局⾮常不方便，⽐如，垂直居中就不容易实现。</p><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;,用来为盒状模型提供最⼤的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。</p><ol><li>容器的属性：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>flex-direction：决定主轴的方向（即⼦ item 的排列方法）flex-direction: row | row-reverse |</span></span>
<span class="line"><span>column | column-reverse;</span></span>
<span class="line"><span>flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</span></span>
<span class="line"><span>flex-flow： .box { flex-flow: || ; }</span></span>
<span class="line"><span>justify-content：对其方式，⽔平主轴对⻬方式</span></span>
<span class="line"><span>align-items：对⻬方式，竖直轴线方向</span></span>
<span class="line"><span>align-content</span></span></code></pre></div><ol start="2"><li>项⽬的属性（元素的属性）：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>order 属性：定义项⽬的排列顺序，顺序越⼩，排列越靠前，默认为 0</span></span>
<span class="line"><span>flex-grow 属性：定义项⽬的放⼤⽐例，即使存在空间，也不会放⼤</span></span>
<span class="line"><span>flex-shrink 属性：定义了项⽬的缩⼩⽐例，当空间不⾜的情况下会等⽐例的缩⼩，如果 定义个</span></span>
<span class="line"><span>item 的 flow-shrink 为 0，则为不缩⼩</span></span>
<span class="line"><span>flex-basis 属性：定义了在分配多余的空间，项⽬占据的空间。</span></span>
<span class="line"><span>flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</span></span>
<span class="line"><span>align-self：允许单个项⽬与其他项⽬不⼀样的对⻬方式，可以覆盖</span></span>
<span class="line"><span>align-items，默认属 性为 auto，表示继承⽗元素的 align-items ⽐如说，用 flex 实现圣杯布局</span></span></code></pre></div><h3 id="_2-圣杯布局" tabindex="-1">2.圣杯布局 <a class="header-anchor" href="#_2-圣杯布局" aria-label="Permalink to &quot;2.圣杯布局&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> &lt;div class=&quot;content&quot;&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;middle&quot;&gt;middle&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.middle {</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  background: #ccc;</span></span>
<span class="line"><span>  float: left;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.left {</span></span>
<span class="line"><span>  position: relative;</span></span>
<span class="line"><span>  width: 100px;</span></span>
<span class="line"><span>  background: #c3e;</span></span>
<span class="line"><span>  float: left;</span></span>
<span class="line"><span>  margin-left: -100%;</span></span>
<span class="line"><span>  right:100px;</span></span>
<span class="line"><span>  /* left:-100px; */</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.right {</span></span>
<span class="line"><span>  width: 100px;</span></span>
<span class="line"><span>  background: #e7e;</span></span>
<span class="line"><span>  float: left;</span></span>
<span class="line"><span>  margin-right: -100px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.content {</span></span>
<span class="line"><span>  height: 200px;</span></span>
<span class="line"><span>  padding-left: 100px;</span></span>
<span class="line"><span>  padding-right: 100px;</span></span>
<span class="line"><span>  overflow: hidden;</span></span>
<span class="line"><span>  background:red;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>flex 布局</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.middle {</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  background: #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.left {</span></span>
<span class="line"><span>  width: 100px;</span></span>
<span class="line"><span>  background: #c3e;</span></span>
<span class="line"><span>  order: -1;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.right {</span></span>
<span class="line"><span>  width: 100px;</span></span>
<span class="line"><span>  background: #e7e;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.content {</span></span>
<span class="line"><span>  height: 200px;</span></span>
<span class="line"><span>  padding-left: 100px;</span></span>
<span class="line"><span>  padding-right: 100px;</span></span>
<span class="line"><span>  overflow: hidden;</span></span>
<span class="line"><span>  background:red;</span></span>
<span class="line"><span>  display:flex;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_3-双飞翼布局" tabindex="-1">3.双飞翼布局 <a class="header-anchor" href="#_3-双飞翼布局" aria-label="Permalink to &quot;3.双飞翼布局&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;warp&quot;&gt;</span></span>
<span class="line"><span>   &lt;div class=&quot;content&quot;&gt;</span></span>
<span class="line"><span>     &lt;div class=&quot;main&quot;&gt;content&lt;/div&gt;</span></span>
<span class="line"><span>   &lt;/div&gt;</span></span>
<span class="line"><span>   &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span></span>
<span class="line"><span>   &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.warp{</span></span>
<span class="line"><span>  width: 100%</span></span>
<span class="line"><span>  height: 300x;</span></span>
<span class="line"><span>  background: #666;</span></span>
<span class="line"><span>  margin: 0 auto;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.content{</span></span>
<span class="line"><span>  float: left;</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  height: 100%;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.main{</span></span>
<span class="line"><span>  background: darkgoldenrod;</span></span>
<span class="line"><span>  margin: 0 200px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.left{</span></span>
<span class="line"><span>  position: relative;</span></span>
<span class="line"><span>  float: left;</span></span>
<span class="line"><span>  width: 200px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  background: salmon;</span></span>
<span class="line"><span>  margin-left: -100%;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.right{</span></span>
<span class="line"><span>  float: left;</span></span>
<span class="line"><span>  width: 200px;</span></span>
<span class="line"><span>  height: 300px;</span></span>
<span class="line"><span>  background:#ccc;</span></span>
<span class="line"><span>  margin-left: -200px;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-rem布局" tabindex="-1">4.rem布局 <a class="header-anchor" href="#_4-rem布局" aria-label="Permalink to &quot;4.rem布局&quot;">​</a></h3><p>⾸先 rem 相对于根(html)的 font-size ⼤⼩来计算。<br> 简单的说它就是⼀个相对单例 如:font-size:10px;,那么（1rem = 10px）<br> 了解计算原理后⾸先解决怎么在不同设备上设置 html 的 font-size ⼤⼩。 <br>其实rem 布局的本质是等⽐缩放，⼀般是基于宽度。</p><ul><li>优点：可以快速适用移动端布局，字体，图⽚⾼度</li><li>缺点： <ol><li>⽬前 ie 不⽀持，对 pc 页面来讲使用次数不多；</li><li>数据量⼤：所有的图⽚，盒⼦都需要我们去给⼀个准确的值；才能保证不同机型的适配；</li><li>在响应式布局中，必须通过 js 来动态控制根元素 font-size 的⼤⼩。也就是说 css 样式和 js 代码有 ⼀定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</li></ol></li></ul><h1 id="javascript" tabindex="-1">javascript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;javascript&quot;">​</a></h1><h2 id="十-javascript数据类型-7种" tabindex="-1">十.JavaScript数据类型 7种 <a class="header-anchor" href="#十-javascript数据类型-7种" aria-label="Permalink to &quot;十.JavaScript数据类型 7种&quot;">​</a></h2><p>基本数据类型：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>。 当ES6问世，直至今日，又新增了两种基本数据类型：<code>Symbol</code>（ES新增）、<code>BigInt</code>（ES10新增）</p><p>引用类型：<code>object</code>,包括 Object Array、Function、Date、RegExp 等。</p><h2 id="十一-js判断变量是不是数组" tabindex="-1">十一.JS判断变量是不是数组 <a class="header-anchor" href="#十一-js判断变量是不是数组" aria-label="Permalink to &quot;十一.JS判断变量是不是数组&quot;">​</a></h2><h5 id="方式一-isarray" tabindex="-1">方式一：isArray <a class="header-anchor" href="#方式一-isarray" aria-label="Permalink to &quot;方式一：isArray&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var arr = [1,2,3];</span></span>
<span class="line"><span>console.log( Array.isArray( arr ) );</span></span></code></pre></div><h5 id="方式二-instanceof-【可写-可不写】" tabindex="-1">方式二：instanceof 【可写,可不写】 <a class="header-anchor" href="#方式二-instanceof-【可写-可不写】" aria-label="Permalink to &quot;方式二：instanceof  【可写,可不写】&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var arr = [1,2,3];</span></span>
<span class="line"><span>console.log( arr instanceof Array );</span></span></code></pre></div><h5 id="方式三-原型prototype" tabindex="-1">方式三：原型prototype <a class="header-anchor" href="#方式三-原型prototype" aria-label="Permalink to &quot;方式三：原型prototype&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var arr = [1,2,3];</span></span>
<span class="line"><span>console.log( Object.prototype.toString.call(arr).indexOf(&#39;Array&#39;) &gt; -1 );</span></span></code></pre></div><h4 id="方式四-isprototypeof" tabindex="-1">方式四：isPrototypeOf() <a class="header-anchor" href="#方式四-isprototypeof" aria-label="Permalink to &quot;方式四：isPrototypeOf()&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var arr = [1,2,3];</span></span>
<span class="line"><span>console.log(  Array.prototype.isPrototypeOf(arr) )</span></span></code></pre></div><h4 id="方式五-constructor" tabindex="-1">方式五：constructor <a class="header-anchor" href="#方式五-constructor" aria-label="Permalink to &quot;方式五：constructor&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var arr = [1,2,3];</span></span>
<span class="line"><span>console.log( arr.constructor.toString().indexOf(&#39;Array&#39;) &gt; -1 )</span></span></code></pre></div><h2 id="十二-var-let-const" tabindex="-1">十二.var &amp;&amp; let &amp;&amp; const <a class="header-anchor" href="#十二-var-let-const" aria-label="Permalink to &quot;十二.var &amp;&amp; let &amp;&amp; const&quot;">​</a></h2><p>ES6之前创建变量用的是var,之后创建变量用的是let/const <code>三者区别：</code></p><ol><li>var定义的变量， 没有块的概念，可以跨块访问 , 不能跨函数访问。<br> let定义的变量，只能在块作用域⾥访问，不能跨块访问，也不能跨函数访问。<br> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域⾥访问，且不能修改。</li><li>var可以 先使用，后声明 ，因为存在变量提升；<br>let必须先声明后使用。</li><li>var是允许在相同作用域内 重复声明同⼀个变量 的，<br>而let与const不允许这⼀现象。</li><li>浏览器环境顶层对象是: <code>window</code>，node环境顶层对象是: <code>global</code>，var声明的全局变量会挂在顶层对象下面，<br>而let、const不会挂在顶层对象下面</li><li>会产⽣暂时性死区 ：<br> 暂时性死区是浏览器的bug：检测⼀个未被声明的变量类型时，不会报错，会返回undefined<br> 如：console.log(typeof a) //undefined<br> 而：console.log(typeof a)//未声明之前不能使用<br> let a</li><li>let /const/function会把当前所在的⼤括号(除函数之外)作为⼀个全新的块级上下文，应用这个机 制，在开发项⽬的时候，遇到循环事件绑定等类似的需求，⽆需再⾃⼰构建闭包来存储，只要基于 let的块作用特征即可解决</li></ol><h2 id="十三-js垃圾回收机制" tabindex="-1">十三.JS垃圾回收机制 <a class="header-anchor" href="#十三-js垃圾回收机制" aria-label="Permalink to &quot;十三.JS垃圾回收机制&quot;">​</a></h2><ul><li>缺点：闭包较多的时候，会消耗内存，导致页面的性能下降，在IE浏览器中才会导致内存泄漏</li><li>使用场景：防抖，节流，函数嵌套函数避免全局污染的时候</li></ul><ol><li>项⽬中，如果存在⼤量不被释放的内存（堆/栈/上下文），页面性能会变得很慢。当某些代码操作 不能被合理释放，就会造成IE内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</li><li>浏览器垃圾回收机制/内存回收机制: - 浏览器的 Javascript 具有⾃动垃圾回收机制( GC:Garbage Collecation )，垃圾收集器 会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</li><li><code>标记清除</code>:在 js 中，最常用的垃圾回收机制是<code>标记清除</code>：当变量进⼊执行环境时，被标记为“进⼊ 环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并 回收它们所占用的内存空间。<br></li></ol><ul><li>⾕歌浏览器：“<code>查找引用</code>”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会 回收它；如果被占用，就不能回收。<br></li><li>IE浏览器：“<code>引用计数法</code>”，当前内存被占用⼀次，计数累加1次，移除占用就减1，减到0时，浏 览器就回收它。</li></ul><ol start="4"><li>优化⼿段：内存优化 ; ⼿动释放：取消内存的占用即可。</li><li>（1）堆内存：fn = null 【null：空指针对象】</li><li>（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</li><li>内存泄漏</li><li>在 JS 中，常⻅的内存泄露主要有 4 种,全局变量、闭包、DOM 元素的引用、定时器<br><a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1730878177&amp;ver=5611&amp;signature=nCD1BzNfKW2mpTepYgplurb0R6Hg0pzJtvHxnmim2elTYrDxs4AKxo3spXY6tSM1fLsGg2r6tdBVyR*d*Fkq-AVnNbougoNZirklJ-k4V2Ayod2CvGMYvcwpJNP*lpZc&amp;new=1" target="_blank" rel="noreferrer">一篇看懂JS垃圾回收机制</a></li></ol><h2 id="十四-什么是闭包-闭包有什么特点" tabindex="-1">十四.什么是闭包，闭包有什么特点？ <a class="header-anchor" href="#十四-什么是闭包-闭包有什么特点" aria-label="Permalink to &quot;十四.什么是闭包，闭包有什么特点？&quot;">​</a></h2><ul><li><p>什么是闭包？函数嵌套函数，内部函数被外部函数返回并保存下来时，就会产生闭包</p></li><li><p>特点：可以重复利用变量，并且这个变量不会污染全局的一种机制；这个变量是一直保存再内存中，不会被垃圾回收机制回收</p></li><li><p>闭包缺点：会导致函数的变量⼀直保存在内存中，过多的闭包可能会导致内存泄漏</p></li><li><p>闭包形成的条件：<br> a. 函数的嵌套<br> b. 内部函数引用外部函数的局部变量，延⻓外部函数的变量⽣命周期</p></li><li><p>闭包的用途：<br> a. 模仿块级作用域<br> b. 保护外部函数的变量 能够访问函数定义时所在的词法作用域(阻⽌其被回收)<br> c. 封装私有化变量<br> d. 创建模块</p></li><li><p>闭包的两个场景<br> 在开发中, 其实我们随处可⻅闭包的⾝影, ⼤部 分前端JavaScript 代码都是“事件驱动”的,即⼀个事件绑定的回调方法;</p><ol><li>发送ajax请求成功|失败的回调;</li><li>setTimeout的延时回调;</li><li>⼀个函数内部返回另⼀个匿名函数,这些都是闭包的应用。</li></ol><h2 id="十五-js-中-this-的五种情况" tabindex="-1">十五.JS 中 this 的五种情况 <a class="header-anchor" href="#十五-js-中-this-的五种情况" aria-label="Permalink to &quot;十五.JS 中 this 的五种情况&quot;">​</a></h2><ol><li>作为普通函数执行时， this 指向 window 。</li><li>当函数作为对象的方法被调用时， this 就会指向 该对象 。</li><li>构造器调用， this 指向 返回的这个对象 。</li><li>箭头函数 箭头函数的 this 绑定看的是 this所在函数定义在哪个对象下 ，就绑定哪个对象。如 果有嵌套的情况，则this绑定到最近的⼀层对象上。</li><li>基于Function.prototype上的 apply 、 call 和 bind 调用模式，这三个方法都可以显示的 指定调用函数的 this 指向。</li></ol><ul><li>apply 接收参数的是数组，</li><li>call 接受参数列表，\`\`</li><li>bind 方法通过传⼊⼀个对象，返回⼀个 this 绑定了传⼊对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。若为空默认是指向全局对象window。</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  &lt;!-- 1. 用apply的情况 --&gt;</span></span>
<span class="line"><span>  var arr1 = [1,2,4,5,7,3,321];</span></span>
<span class="line"><span>  console.log( Math.max.apply(null,arr1) )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &lt;!-- 2. 用bind的情况 --&gt;</span></span>
<span class="line"><span>  var btn = document.getElementById(&#39;btn&#39;);</span></span>
<span class="line"><span>  var h1s = document.getElementById(&#39;h1s&#39;);</span></span>
<span class="line"><span>  btn.onclick = function(){</span></span>
<span class="line"><span>    console.log( this.id );</span></span>
<span class="line"><span>  }.bind(h1s)</span></span></code></pre></div><h2 id="十六-new操作符具体做了什么" tabindex="-1">十六.new操作符具体做了什么 <a class="header-anchor" href="#十六-new操作符具体做了什么" aria-label="Permalink to &quot;十六.new操作符具体做了什么&quot;">​</a></h2><details open><summary>new操作符具体做了什么</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //1. 创建了一个空的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//var obj = Object.create({})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //2. 将空对象的原型，指向于构造函数的原型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //3. 将空对象作为构造函数的上下文（改变this指向）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj,args);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //4. 对构造函数有返回值的处理判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div></details><h2 id="十七-请描述event-loop的机制-什么是宏任务和微任务-两者有什么区别" tabindex="-1">十七.请描述event-loop的机制, 什么是宏任务和微任务，两者有什么区别？ <a class="header-anchor" href="#十七-请描述event-loop的机制-什么是宏任务和微任务-两者有什么区别" aria-label="Permalink to &quot;十七.请描述event-loop的机制, 什么是宏任务和微任务，两者有什么区别？&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  在Job queue中的队列分为两种类型：macro-task和microTask。我们举例来看执行顺序的规定，我们设</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  macro-task队列包含任务: a1, a2 , a3</span></span>
<span class="line"><span>  micro-task队列包含任务: b1, b2 , b3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  执行顺序为，首先执行marco-task队列开头的任务，也就是 a1 任务，执行完毕后，在执行micro-task队列里的所有任务，也就是依次执行b1, b2 , b3，执行完后清空micro-task中的任务，接着执行marco-task中的第二个任务，依次循环。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  了解完了macro-task和micro-task两种队列的执行顺序之后，我们接着来看，真实场景下这两种类型的队列里真正包含的任务（我们以node V8引擎为例），在node V8中，这两种类型的真实任务顺序如下所示：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  macro-task队列真实包含任务：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  script(主程序代码),setTimeout, setInterval, setImmediate, I/O, UI rendering</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  micro-task队列真实包含任务：</span></span>
<span class="line"><span>  process.nextTick, Promises, Object.observe, MutationObserver</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  由此我们得到的执行顺序应该为：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  script(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I/O——&gt;UI rendering</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  在ES6中macro-task队列又称为ScriptJobs，而micro-task又称PromiseJobs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ## 什么宏任务和微任务，两者有什么区别？</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  宏任务：setTimeout、setInterval、Ajax、DOM时间</span></span>
<span class="line"><span>  微任务：Promise async/await</span></span>
<span class="line"><span>  微任务是ES6语法规定的</span></span>
<span class="line"><span>  宏任务是浏览器规定的</span></span>
<span class="line"><span>  微任务执行时机比宏任务早（微任务在DOM渲染前执行，宏任务在DOM渲染后执行）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  setTimeout(function(){console.log(1)},0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  new Promise(function(resolve,reject){</span></span>
<span class="line"><span>    console.log(2);</span></span>
<span class="line"><span>    resolve();</span></span>
<span class="line"><span>  }).then(function(){console.log(3)</span></span>
<span class="line"><span>  }).then(function(){console.log(4)});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  process.nextTick(function(){console.log(5)});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  console.log(6);</span></span>
<span class="line"><span>  //输出2,6,5,3,4,1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  setTimeout(function(){console.log(1)},0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  new Promise(function(resolve,reject){</span></span>
<span class="line"><span>    console.log(2);</span></span>
<span class="line"><span>    setTimeout(function(){resolve()},0)</span></span>
<span class="line"><span>  }).then(function(){console.log(3)</span></span>
<span class="line"><span>  }).then(function(){console.log(4)});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  process.nextTick(function(){console.log(5)});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  console.log(6);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //输出的是  2 6 5 1 3 4</span></span></code></pre></div><p>参考文章： <a href="https://github.com/forthealllight/blog/issues/5" target="_blank" rel="noreferrer">从promise、process.nextTick、setTimeout出发，谈谈Event Loop中的Job queue</a></p><h2 id="十八-有听过函数防抖和函数节流吗" tabindex="-1">十八.有听过函数防抖和函数节流吗？ <a class="header-anchor" href="#十八-有听过函数防抖和函数节流吗" aria-label="Permalink to &quot;十八.有听过函数防抖和函数节流吗？&quot;">​</a></h2><details open><summary>函数防抖（debounce）</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 防抖的中心思想在于：我会等你到底。在某段时间内，不管你触发了多少次回调，我都只认最后一次。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (timer) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }, duration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span></code></pre></div></details><details open><summary>函数节流（throttle）</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // throttle 的中心思想在于：在某段时间内，不管你触发了多少次回调，我都只认第一次，并在计时结束时给予响应。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // last为上一次触发回调的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> now</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span></code></pre></div></details><h2 id="十九-简述mvvm" tabindex="-1">十九.简述MVVM <a class="header-anchor" href="#十九-简述mvvm" aria-label="Permalink to &quot;十九.简述MVVM&quot;">​</a></h2><h3 id="什么是mvvm" tabindex="-1">什么是MVVM？ <a class="header-anchor" href="#什么是mvvm" aria-label="Permalink to &quot;什么是MVVM？&quot;">​</a></h3><p>视图模型双向绑定 ，是 <code>Model-View-ViewModel</code> 的缩写，也就是把 MVC 中的 <code>Controller</code> 演 变成 <code>ViewModel</code>。<code>Model</code> 层代表数据模型， <code>View</code> 代表UI组件， <code>ViewModel</code> 是 <code>View</code> 和 <code>Model</code> 层的桥梁，数据会绑定到 <code>viewModel</code> 层并⾃动将数据渲染到页面中，视图变化的时候会通 知 <code>viewModel</code> 层更新数据。<br> 以前是操作DOM结构更新视图，现在是 <code>数据驱动视图</code> 。</p><h3 id="mvvm的优点" tabindex="-1">MVVM的优点： <a class="header-anchor" href="#mvvm的优点" aria-label="Permalink to &quot;MVVM的优点：&quot;">​</a></h3><ol><li><code>低耦合</code> 。视图（View）可以独⽴于Model变化和修改，⼀个Model可以绑定到不同的View上，当 View变化的时候Model可以不变化，当Model变化的时候View也可以不变；</li><li><code>可重用性</code> 。你可以把⼀些视图逻辑放在⼀个Model⾥⾯，让很多View重用这段视图逻辑。</li><li><code>独⽴开发</code> 。开发⼈员可以专注于业务逻辑和数据的开发(ViewModel)，设计⼈员可以专注于页面设 计。</li><li><code>可测试</code> 。</li></ol><h2 id="二十-vue底层实现原理" tabindex="-1">二十.Vue底层实现原理 <a class="header-anchor" href="#二十-vue底层实现原理" aria-label="Permalink to &quot;二十.Vue底层实现原理&quot;">​</a></h2><p>vue.js是采用<code>数据劫持</code>结合<code>发布者-订阅者模式</code>的方式，通过Object.defineProperty()来劫持各个属性 的setter和getter，在数据变动时发布消息给订阅者，触发相应的监听回调<br> Vue是⼀个典型的MVVM框架，模型（Model）只是普通的javascript对象，修改它则试图（View）会 ⾃动更新。这种设计让状态管理变得⾮常简单而直观<br></p><ul><li><code>Observer</code>（数据监听器） : Observer的核⼼是通过Object.defineProprtty()来监听数据的变动，这个 函数内部可以定义setter和getter，每当数据发⽣变化，就会触发setter。这时候Observer就要通知订 阅者，订阅者就是Watcher<br></li><li><code>Watcher</code>（订阅者） : Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是： <ol><li>在⾃⾝实例化时往属性订阅器(dep)⾥⾯添加⾃⼰</li><li>⾃⾝必须有⼀个update()方法</li><li>待属性变动dep.notice()通知时，能调用⾃⾝的update()方法，并触发Compile中绑定的回调<br></li></ol></li><li><code>Compile</code>（指令解析器） : Compile主要做的事情是解析模板指令，将模板中变量替换成数据，然后初 始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，⼀旦数据有变动，收到通知，更新试图</li></ul><h2 id="二十一-谈谈对vue生命周期的理解" tabindex="-1">二十一.谈谈对vue⽣命周期的理解？ <a class="header-anchor" href="#二十一-谈谈对vue生命周期的理解" aria-label="Permalink to &quot;二十一.谈谈对vue⽣命周期的理解？&quot;">​</a></h2><p>vue实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom、渲染、更新、卸载等⼀系列过程，称这是vue的⽣命周期。<br></p><ol><li><code>beforeCreate</code>（创建前） ：在数据观测和初始化事件还未开始（此时data和methods中的数据都还没有初始化）</li><li><code>created</code>（创建后） ：实例创建完成后，此时已经完成了数据观测，属性和方法的运算，<code>watch/event</code>事件回调。然而，挂载阶段还没开始，<code>$el</code>属性目前不可见</li><li><code>beforeMount</code>（挂载前） ：在挂载开始之前被调用：相关的render函数首次被调用。该钩在服务器端渲染期间不被调用。</li><li><code>mounted</code>（挂载后） ：<code>el</code>被新创建的<code>vm.$el</code>替换，并挂载到实例上去之后调用该钩子。如果根实例挂载到了一个文档内元素上，当<code>mounted</code>被调用时vm.$el也在文档内。</li><li><code>beforeUpdate</code>（更新前） ：数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前。你可以在这个钩⼦中进一步地更改状态，这不会触发附加的重渲染过程。</li><li><code>updated</code>（更新后） ：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩⼦。当这个钩⼦被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩在服务器端渲染期间不被调用。</li><li><code>beforeDestroy</code>（销毁前） ：实例销毁之前调用。在这一步，实例仍然完全能用。</li><li><code>destroyed</code>（销毁后） ：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ol><h2 id="二十二-computed、methods、watch区别" tabindex="-1">二十二.computed、methods、watch区别 <a class="header-anchor" href="#二十二-computed、methods、watch区别" aria-label="Permalink to &quot;二十二.computed、methods、watch区别&quot;">​</a></h2><ol><li><code>computed</code> 是计算属性，依赖其它属性计算值，并且 <code>computed</code> 的值有<code>缓存</code>，只有它<code>依赖</code>的属性值发⽣改变时才会重新计算，如果一进入页面调用，就会触发</li><li><code>methods</code> 是方法，⽆缓存，每调用一次就执行一次</li><li><code>watch</code> 监听属性值的变化，当数据发生改变时，才会触发，可以得到现在的值和过去的值</li></ol><h2 id="二十三-组件中的data为什么是一个函数" tabindex="-1">二十三.组件中的data为什么是⼀个函数？ <a class="header-anchor" href="#二十三-组件中的data为什么是一个函数" aria-label="Permalink to &quot;二十三.组件中的data为什么是⼀个函数？&quot;">​</a></h2><p><code>data</code> 是⼀个函数，这样每复用⼀次组件，就会返回⼀个全新的对象，而不会造成数据之间的污染。 如果 data 是⼀个对象，那么由于对象属于引用类型，当复用组件时，它们的内存指向是同⼀个地 址，当⼀个组件中的 data 发⽣变化时，就会影响到其它的组件</p><h2 id="二十四-为什么v-for和v-if不建议用在一起" tabindex="-1">二十四.为什么v-for和v-if不建议用在⼀起 <a class="header-anchor" href="#二十四-为什么v-for和v-if不建议用在一起" aria-label="Permalink to &quot;二十四.为什么v-for和v-if不建议用在⼀起&quot;">​</a></h2><ol><li>当 v-for 和 v-if 处于同⼀个节点时，v-for 的优先级⽐ v-if 更⾼，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很⼤，而真正要展示的数据很少时，这将造成很⼤的性能浪费 （Vue2.x）</li><li>这种场景建议使用 computed，先对数据进行过滤<br></li><li>3.x 版本中 v-if 总是优先于 v-for ⽣效</li></ol><h2 id="二十五-nexttick的实现" tabindex="-1">二十五.nextTick的实现 <a class="header-anchor" href="#二十五-nexttick的实现" aria-label="Permalink to &quot;二十五.nextTick的实现&quot;">​</a></h2><ol><li><code>nextTick</code> 是 <code>Vue</code> 提供的⼀个全局 <code>API</code> ,是在下次 <code>DOM</code> 更新循环结束之后执行延迟回调，在修 改数据之后使用 <code>$nextTick</code> ，则可以在回调中获取更新后的 <code>DOM</code> ；</li><li>Vue在更新DOM时是异步执行的。只要侦听到数据变化， <code>Vue</code> 将开启1个队列，并缓冲在同⼀事件 循环中发⽣的所有数据变更。如果同⼀个 <code>watcher</code> 被多次触发，只会被推⼊到队列中-次。这种 在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是⾮常重要的。 <code>nextTick</code> 方法会在 队列中加⼊⼀个回调函数，确保该函数在前⾯的dom操作完成后才调用；</li><li>⽐如，我在⼲什么的时候就会使用nextTick，传⼀个回调函数进去，在⾥⾯执行dom操作即可；</li><li>我也有简单了解 <code>nextTick</code> 实现，它会在 <code>callbacks</code> ⾥⾯加⼊我们传⼊的函数，然后用 <code>timerFunc</code> 异步方式调用它们，⾸选的异步方式会是 <code>Promise</code> 。这让我明⽩了为什么可以在 <code>nextTick</code> 中看到 dom 操作结果。</li></ol><h2 id="二十六-vue组件的通信-组件的传值" tabindex="-1">二十六.Vue组件的通信（组件的传值） <a class="header-anchor" href="#二十六-vue组件的通信-组件的传值" aria-label="Permalink to &quot;二十六.Vue组件的通信（组件的传值）&quot;">​</a></h2><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="`+t+`" alt="image-20231119185900990" style="zoom:60%;"><h3 id="_6-1-【props】" tabindex="-1">6.1. 【props】 <a class="header-anchor" href="#_6-1-【props】" aria-label="Permalink to &quot;6.1. 【props】&quot;">​</a></h3><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;father&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;父组件，&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我的车：{{ car }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;儿子给的玩具：{{ toy }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">car</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getToy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getToy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Father&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Child.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;奔驰&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> toy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getToy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		toy.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>子组件</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;子组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我的玩具：{{ toy }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;父给我的车：{{ car }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getToy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(toy)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;玩具给父亲&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> toy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;奥特曼&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;car&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getToy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_6-2-【自定义事件】" tabindex="-1">6.2. 【自定义事件】 <a class="header-anchor" href="#_6-2-【自定义事件】" aria-label="Permalink to &quot;6.2. 【自定义事件】&quot;">​</a></h3><ol><li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件： <ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件： <ul><li>事件名是任意名称</li><li><strong style="color:red;">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong></li></ul></li></ul><ol start="3"><li><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Child</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @send-toy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toy = $event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toy = $event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;测试&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//子组件中，触发事件：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;send-toy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, 具体数据)</span></span></code></pre></div></li></ol><h3 id="_6-3-【mitt】" tabindex="-1">6.3. 【mitt】 <a class="header-anchor" href="#_6-3-【mitt】" aria-label="Permalink to &quot;6.3. 【mitt】&quot;">​</a></h3><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mitt</span></span></code></pre></div><p>新建文件：<code>src\\utils\\emitter.ts</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入mitt </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mitt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mitt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建emitter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mitt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 绑定事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  emitter.on(&#39;abc&#39;,(value)=&gt;{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    console.log(&#39;abc事件被触发&#39;,value)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  emitter.on(&#39;xyz&#39;,(value)=&gt;{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    console.log(&#39;xyz事件被触发&#39;,value)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  setInterval(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 触发事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    emitter.emit(&#39;abc&#39;,666)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    emitter.emit(&#39;xyz&#39;,777)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  }, 1000);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  setTimeout(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 清理事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    emitter.all.clear()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  }, 3000);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建并暴露mitt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emitter</span></span></code></pre></div><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emitter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/utils/emitter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onUnmounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绑定事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;send-toy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;send-toy事件被触发&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onUnmounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 解绑事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;send-toy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emitter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/utils/emitter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendToy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 触发事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;send-toy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,toy.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h3 id="_6-4-【v-model】" tabindex="-1">6.4.【v-model】 <a class="header-anchor" href="#_6-4-【v-model】" aria-label="Permalink to &quot;6.4.【v-model】&quot;">​</a></h3><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 使用v-model指令 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!-- v-model的本质是下面这行代码 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;input </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type=&quot;text&quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :value=&quot;userName&quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 组件标签上使用v-model指令 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AtguiguInput</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 组件标签上v-model的本质 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AtguiguInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modelValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><p><code>AtguiguInput</code>组件中：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modelValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update:model-value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,$event.target.value)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AtguiguInput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 接收props</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;modelValue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update:model-value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 也可以更换value，例如改成abc--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AtguiguInput</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 上面代码的本质如下 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AtguiguInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><p><code>AtguiguInput</code>组件中：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update:abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,$event.target.value)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AtguiguInput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 接收props</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update:abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AtguiguInput</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xyz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div></li></ol><h3 id="_6-5-【-attrs-】" tabindex="-1">6.5.【$attrs 】 <a class="header-anchor" href="#_6-5-【-attrs-】" aria-label="Permalink to &quot;6.5.【$attrs 】&quot;">​</a></h3><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p>注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;father&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;父组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{x:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updateA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Father&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Child.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		a.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>子组件：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;子组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">GrandChild</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$attrs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GrandChild </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./GrandChild.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>孙组件：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;grand-child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;孙组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;a：{{ a }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;b：{{ b }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;c：{{ c }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;d：{{ d }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;x：{{ x }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;y：{{ y }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点我更新A&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GrandChild&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;updateA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_6-6-【-refs、-parent】" tabindex="-1">6.6. 【$refs、$parent】 <a class="header-anchor" href="#_6-6-【-refs、-parent】" aria-label="Permalink to &quot;6.6. 【$refs、$parent】&quot;">​</a></h3><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table tabindex="0"><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h3 id="_6-7-【provide、inject】" tabindex="-1">6.7. 【provide、inject】 <a class="header-anchor" href="#_6-7-【provide、inject】" aria-label="Permalink to &quot;6.7. 【provide、inject】&quot;">​</a></h3><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;father&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;父组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;资产：{{ money }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;汽车：{{ car }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;资产+1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">car.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;汽车价格+1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Father&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Child.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref,reactive,provide } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> car </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    brand:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;奔驰&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    price:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 用于更新money的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    money.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 提供数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moneyContext&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{money,updateMoney})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;car&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,car)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;grand-child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是孙组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;资产：{{ money }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;汽车：{{ car }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点我&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GrandChild&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 注入数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {money,updateMoney} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moneyContext&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{money:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> car </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;car&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ol><h2 id="二十七、javascript-的执行上下文和闭包" tabindex="-1">二十七、JavaScript 的执行上下文和闭包 <a class="header-anchor" href="#二十七、javascript-的执行上下文和闭包" aria-label="Permalink to &quot;二十七、JavaScript 的执行上下文和闭包&quot;">​</a></h2><p>执行上下文是代码执行时的环境，包括变量、对象和函数。闭包是⼀个函数和其周围状态（词法环境）的组合，允许你访问函数外部的变量。</p><h2 id="二十八、js-执行-100-万个任务-如何保证浏览器不卡顿" tabindex="-1">二十八、JS 执行 100 万个任务， 如何保证浏览器不卡顿？ <a class="header-anchor" href="#二十八、js-执行-100-万个任务-如何保证浏览器不卡顿" aria-label="Permalink to &quot;二十八、JS 执行 100 万个任务， 如何保证浏览器不卡顿？&quot;">​</a></h2><h3 id="web-workers" tabindex="-1">Web Workers <a class="header-anchor" href="#web-workers" aria-label="Permalink to &quot;Web Workers&quot;">​</a></h3><p>要确保浏览器在执行100万个任务时不会卡顿，你可以考虑使用Web Workers来将这些任务从主线程中分离出来。</p><p>Web Workers允许在后台线程中运行脚本，从而避免阻塞主线程，保持页面的响应性。 以下是⼀个使用Web Workers的简单示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 主线程代码</span></span>
<span class="line"><span>const worker = new Worker(&#39;worker.js&#39;); // 创建⼀个新的Web Worker</span></span>
<span class="line"><span>worker.postMessage({ start: 0, end: 1000000 }); // 向Web Worker发送消息</span></span>
<span class="line"><span>worker.onmessage = function(event) {</span></span>
<span class="line"><span>  const result = event.data;</span></span>
<span class="line"><span>  console.log(&#39;任务完成：&#39;, result);</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>// worker.js - Web Worker代码</span></span>
<span class="line"><span>onmessage = function(event) {</span></span>
<span class="line"><span>  const start = event.data.start;</span></span>
<span class="line"><span>  const end = event.data.end;</span></span>
<span class="line"><span>  let sum = 0;</span></span>
<span class="line"><span>  for (let i = start; i &lt;= end; i++) {</span></span>
<span class="line"><span>    sum += i;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  postMessage(sum); // 向主线程发送消息</span></span>
<span class="line"><span> };</span></span></code></pre></div><h2 id="从输入url到网页渲染完毕经历了什么" tabindex="-1">从输入URL到网页渲染完毕经历了什么？ <a class="header-anchor" href="#从输入url到网页渲染完毕经历了什么" aria-label="Permalink to &quot;从输入URL到网页渲染完毕经历了什么？&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存=&gt;系统缓存=&gt;路由器缓存，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>得到服务器的ip地址后，浏览器根据这个ip以及相应的端口号，构造一个http请求，这个请求报文会包括这次请求的信息，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>主要是请求方法，请求说明和请求附带的数据，并将这个http请求封装在一个tcp包中，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给浏览器</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(DNS解析=&gt;TCP连接=&gt;发送HTTP请求=&gt;服务器处理请求并返回HTTP报文=&gt;浏览器解析渲染页面=&gt;连接结束)</span></span></code></pre></div><h2 id="二十九、如何渲染几十万数据不卡帧" tabindex="-1">二十九、如何渲染几十万数据不卡帧 <a class="header-anchor" href="#二十九、如何渲染几十万数据不卡帧" aria-label="Permalink to &quot;二十九、如何渲染几十万数据不卡帧&quot;">​</a></h2><img src="`+e+'" alt="css.jpg" style="zoom:60%;"> vue相关：[https://github.com/answershuto/learnVue?tab=readme-ov-file](https://github.com/answershuto/learnVue?tab=readme-ov-file) ',179)]))}const u=i(h,[["render",k]]);export{y as __pageData,u as default};
