import{_ as n,c as a,a2 as e,o as t}from"./chunks/framework.CjNeJe2C.js";const u=JSON.parse('{"title":"服务器上搭建自己的ngrok服务","description":"","frontmatter":{"title":"服务器上搭建自己的ngrok服务","date":"2020-04-03T00:00:00.000Z","tags":["ngrok"],"categories":["ngrok"],"author":["游城走不动"]},"headers":[],"relativePath":"views/web随笔/ngrok.md","filePath":"views/web随笔/ngrok.md"}'),p={name:"views/web随笔/ngrok.md"};function o(i,s,l,c,r,g){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="_1-什么是ngrok" tabindex="-1">1. 什么是ngrok <a class="header-anchor" href="#_1-什么是ngrok" aria-label="Permalink to &quot;1. 什么是ngrok&quot;">​</a></h2><ul><li>ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。</li><li>反向代理在计算机网络中是代理服务器的一种。服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器集群的存在。</li></ul><p>ngrok是一个内网穿透的解决方案,允许您将本地计算机上运行的Web服务器公开到互联网</p><p>ngrok服务端会建立http和https服务，以及供客户端连接的服务，默认端口4443</p><h2 id="_2-如何部署ngrok" tabindex="-1">2.如何部署ngrok <a class="header-anchor" href="#_2-如何部署ngrok" aria-label="Permalink to &quot;2.如何部署ngrok&quot;">​</a></h2><h3 id="_1-准备工作" tabindex="-1">1.准备工作： <a class="header-anchor" href="#_1-准备工作" aria-label="Permalink to &quot;1.准备工作：&quot;">​</a></h3><ul><li>一台公网服务器</li><li>一个域名</li></ul><p>关于域名： ps:假设你的域名是 abc.com (全文皆使用此假设)</p><p>我们可以使用顶级域名，如：abc.com，也可以使用二级域名，如：ngrok.abc.com，这取决你的需要</p><p>本文使用二级域名（ngrok.abc.com）</p><p>使用二级域名，需要先将二级域名(ngrok.abc.com)通过A记录解析到服务器域名。然后将三级域名（比如 test.ngrok）通过CNAME的方式解析到 ngrok.abc.com，如此ngrok.abc.com便成为了本地与服务端的连接域名，test.ngrok.abc.com则是映射域名</p><p>我们映射本地服务的时候，访问的地址便是 test.ngrok.abc.com，解析配置参考如下： <img src="https://raw.githubusercontent.com/mail-img/picBed/master/blog/img/picgo/20200404184046.png" alt="20200404184046"></p><h3 id="_2-开发配置ngrok" tabindex="-1">2.开发配置ngrok <a class="header-anchor" href="#_2-开发配置ngrok" aria-label="Permalink to &quot;2.开发配置ngrok&quot;">​</a></h3><ol><li>安装git 和Golang</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum install build-essential golang mercurial git</span></span></code></pre></div><ol start="2"><li>进入存放代码位置，下载源码</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/inconshreveable/ngrok.git</span></span></code></pre></div><ol start="3"><li>我们先声明ngrok域名变量</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export NGROK_DOMAIN=&quot;ngrok.abc.com&quot;</span></span></code></pre></div><ol start="4"><li>生成证书（默认的证书是 ngrok.com，我们需要改成 ngrok.abc.com）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd ngrok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl genrsa -out rootCA.key 2048</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pem</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl genrsa -out device.key 2048</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl req -new -key device.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out device.csr</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span></span></code></pre></div><p>执行完上述命令，正常情况下，该目录会多出device.crt、device.csr、device.key、rootCA.key、rootCA.pem、rootCA.srl六个文件，用它们来替换默认的证书文件即可。默认的证书文件在“./assets/client/tls”和“./assets/server/tls/”目录中</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cp rootCA.pem assets/client/tls/ngrokroot.crt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cp device.crt assets/server/tls/snakeoil.crt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cp device.key assets/server/tls/snakeoil.key</span></span></code></pre></div><ol start="5"><li>开始编译双端的ngrok文件</li></ol><ul><li>编译ngrokd（服务器端）（此过程等待时间略长）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!--linux服务端--&gt;</span></span>
<span class="line"><span> make release-server</span></span></code></pre></div><p>编译完服务可以在./bin/目录中找到文件ngrokd</p><p>运行以下命令进行测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./bin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; -httpAddr=&quot;:8888&quot;</span></span></code></pre></div><p>如果显示下面的内容则表示编译成功：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[17:27:36 CST 2020/04/03] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified</span></span>
<span class="line"><span>[17:27:36 CST 2020/04/03] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds</span></span>
<span class="line"><span>[17:27:36 CST 2020/04/03] [INFO] (ngrok/log.Info:112) Listening for public http connections on [::]:8888</span></span>
<span class="line"><span>[17:27:36 CST 2020/04/03] [INFO] (ngrok/log.Info:112) Listening for public https connections on [::]:443</span></span>
<span class="line"><span>[17:27:36 CST 2020/04/03] [INFO] (ngrok/log.Info:112) Listening for control and proxy connections on [::]:4443</span></span>
<span class="line"><span>[17:28:06 CST 2020/04/03] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting: {&quot;bytesIn.count&quot;:0,&quot;bytesOut.count&quot;:0,&quot;connMeter.count&quot;:0,&quot;connMeter.m1&quot;:0,&quot;httpTunnelMeter.count&quot;:0,&quot;linux&quot;:0,&quot;osx&quot;:0,&quot;other&quot;:0,&quot;tcpTunnelMeter.count&quot;:0,&quot;tunnelMeter.count&quot;:0,&quot;tunnelMeter.m1&quot;:0,&quot;windows&quot;:0}</span></span></code></pre></div><ul><li>Ctrl+C退出ngrokd，编译客户端</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!--Mac OS客户端--&gt;</span></span>
<span class="line"><span>GOOS=darwin GOARCH=386 make release-client</span></span>
<span class="line"><span>GOOS=darwin GOARCH=amd64 make release-client</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;!--windows客户端--&gt;</span></span>
<span class="line"><span>GOOS=windows GOARCH=386 make release-client</span></span>
<span class="line"><span>GOOS=windows GOARCH=amd64 make release-client</span></span></code></pre></div><p>编译完客户端，我们可以在./bin目录下看到相应的文件夹，下载对应系统的客户端到本地</p><ol start="6"><li>双端部署运行</li></ol><ul><li>启动服务端的ngrokd</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./bin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; -httpAddr=&quot;:8888&quot; -httpsAddr=&quot;:443&quot;</span></span></code></pre></div><p>这里的8888指的是服务器启用8888端口,穿透后的域名为http://***.ngrok.abc.com:8888 ps:请注意8888端口是否开放</p><ul><li>编写客户端配置文件 新建配置文件ngrok.cfg</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server_addr: &quot;ngrok.abc.com:4443&quot;</span></span>
<span class="line"><span>trust_host_root_certs: false</span></span></code></pre></div><p>运行客户端</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ngrok -config=ngrok.cfg -subdomain=test 3000</span></span></code></pre></div><p>这里的test是配置的子域名，3000为映射本地服务的端口，可以更改</p><p>注意：如果不加参数-subdomain=test，将会随机自动分配子域名。</p><p>访问地址为：test.ngrok.abc.com:8888</p><p>本地被映射地址：127.0.0.1:3000</p><p>客户端ngrok正常执行显示的内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ngrok                                                  (Ctrl+C to quit)</span></span>
<span class="line"><span>Tunnel Status     online</span></span>
<span class="line"><span>Version           1.7/1.7</span></span>
<span class="line"><span>Forwarding        http://test.ngrok.abc.com:8888 -&gt; 127.0.0.1:3000</span></span>
<span class="line"><span>Forwarding        https://test.ngrok.abc.com:8888 -&gt; 127.0.0.1:3000</span></span>
<span class="line"><span>Web Interface     127.0.0.1:4040</span></span>
<span class="line"><span># Conn            0</span></span>
<span class="line"><span>Avg Conn Time     0.00ms</span></span></code></pre></div><p>运行成功，ngrok服务搭建完成</p><p>参考文档：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/49192702" target="_blank" rel="noreferrer">知乎：在服务器上搭建自己的ngrok服务</a></li><li><a href="https://www.jianshu.com/p/f5c2a55e77bd" target="_blank" rel="noreferrer">简书：最接地气的Ngrok服务器搭建教程</a></li></ul>`,51)]))}const h=n(p,[["render",o]]);export{u as __pageData,h as default};
